#!/usr/bin/env bash

# shellcheck shell=bash

# ``````````````````````````````````````````````````````````````````````````````
# Function name: DomainChainCheck()
#
# Description:
#   Check domain certificates chain.
#
# Usage:
#   DomainChainCheck domain
#
# Examples:
#   DomainChainCheck example.com
#

function DomainChainCheck() {

  # shellcheck disable=SC2034
  local _FUNCTION_ID="DomainChainCheck"
  local _STATE=0

  # shellcheck disable=SC2034,SC2154
  _ssl_remote_socket="${_domain_ip}:${_domain_port}"
  # shellcheck disable=SC2154
  _ssl_domain_name="$_domain_name"

  _ssl_domain_cert_chain=$(echo | \
                     openssl s_client -verify 5 -servername "$_ssl_domain_name" \
                     -connect "$_ssl_remote_socket" 2>&1 | \
                     sed -ne '/Certificate chain/,/---/p')

  _ssl_domain_cert_chain_verify_subjects=$(echo "$_ssl_domain_cert_chain" | \
                     grep -e "s:/" | \
                     grep -o "/CN=.*" | \
                     cut -d "=" -f2- | \
                     cut -d "/" -f1 | \
                     awk '{$1=$1};1')

  _ssl_domain_cert_chain_verify_issuers=$(echo "$_ssl_domain_cert_chain" | \
                     grep -e "i:/" | \
                     grep -o "/CN=.*" | \
                     cut -d "=" -f2- | \
                     cut -d "/" -f1 | \
                     awk '{$1=$1};1')

  _chain_stack_complete=()

  _ssl_domain_cert_chain_verify_subjects_stack=()
  _ssl_domain_cert_chain_verify_issuers_stack=()

  _ssl_domain_cert_chain_verify_subjects_num=$(echo "$_ssl_domain_cert_chain_verify_subjects" | wc -l)
  _ssl_domain_cert_chain_verify_issuers_num=$(echo "$_ssl_domain_cert_chain_verify_issuers" | wc -l)

  for i in $(seq 1 "$_ssl_domain_cert_chain_verify_subjects_num") ; do

    _ssl_domain_cert_chain_verify_subjects_first=$(echo "$_ssl_domain_cert_chain_verify_subjects" | \
                    sed -n "${i}p" | cut -d "/" -f2- | cut -d "=" -f2-)

    _ssl_domain_cert_chain_verify_subjects_stack+=("${_ssl_domain_cert_chain_verify_subjects_first}")

  done

  for i in $(seq 1 "$_ssl_domain_cert_chain_verify_issuers_num") ; do

    _ssl_domain_cert_chain_verify_issuers_first=$(echo "$_ssl_domain_cert_chain_verify_issuers" | \
                    sed -n "${i}p" | cut -d "/" -f2- | cut -d "=" -f2-)

    _ssl_domain_cert_chain_verify_issuers_stack+=("${_ssl_domain_cert_chain_verify_issuers_first}")

  done

  _server_certificate_status=0
  _last_certificate_status=0
  _last_certificate_duplicate=0
  _root_in_local_store=0

  _last_subject=$((_ssl_domain_cert_chain_verify_subjects_num - 1))
  _last_subject_2=$((_ssl_domain_cert_chain_verify_subjects_num - 2))

  _last_issuer=$((_ssl_domain_cert_chain_verify_issuers_num - 1))
  _last_issuer_2=$((_ssl_domain_cert_chain_verify_issuers_num - 2))

  for i in $(seq 0 "$_last_subject") ; do

    # Verify the first certificate.
    if [[ "$i" -eq 0 ]] ; then

      if [[ "${_ssl_domain_cert_chain_verify_subjects_stack[$i]}" == "$_ssl_domain_cn" ]] ; then

        _chain_stack_complete+=("${_ssl_domain_cert_chain_verify_subjects_stack[$i]}")

        _server_certificate_status=1

      else

        _chain_stack_complete+=("${_ssl_domain_cert_chain_verify_subjects_stack[$i]}")

      fi

    else

      if [[ "${_ssl_domain_cert_chain_verify_subjects_stack[$i]}" == "${_ssl_domain_cert_chain_verify_issuers_stack[$i]}" ]] ; then

        _last_certificate_duplicate=1

        _last_certificate_duplicate_id="⊙"

      elif [[ "$i" -eq "$_last_subject" ]] ; then

        _chain_stack_complete+=("${_ssl_domain_cert_chain_verify_subjects_stack[$i]}")

      else

        _chain_stack_complete+=("${_ssl_domain_cert_chain_verify_subjects_stack[$i]}")

      fi

    fi

  done

  _chain_stack_complete+=("${_ssl_domain_cert_chain_verify_issuers_stack[$i]}")

  if [[ "$i" -eq "$_last_subject" ]] ; then

      _last_certificate_status=1

      # shellcheck disable=SC2044,SC2154
      for j in $(find "$_ssl_ca_path" -name "*.pem") ; do

        # shellcheck disable=SC2116
        _root_certificate_cn=$(echo "${_ssl_domain_cert_chain_verify_issuers_stack[$i]}")

        # shellcheck disable=SC2154
        if openssl x509 -noout -subject -in "$j" | grep -q "$_root_certificate_cn" ; then

          _root_in_local_store=1

          _root_certificate_issuer=$(openssl x509 -noout -issuer -in "$j" | \
                     grep -o "CN =.*" | \
                     cut -d "=" -f2- | \
                     cut -d "/" -f1 | \
                     awk '{$1=$1};1')

          break

        else

          _root_in_local_store=0

          _root_certificate_issuer=$(openssl x509 -noout -issuer -in "$j" | \
                     grep -o "CN =.*" | \
                     cut -d "=" -f2- | \
                     cut -d "/" -f1 | \
                     awk '{$1=$1};1')

        fi

      done

    fi

  _chain_of_trust_num="${#_chain_stack_complete[@]}"

  # shellcheck disable=SC2086,SC2154
  if [[ "$HTRACE_COLORS" == "off" ]] ; then

    # shellcheck disable=SC2086,SC2154
    printf '         chain of trust: %s'

  else

    # shellcheck disable=SC2086,SC2154
    printf '         chain of trust: \e['${g2_trgb}'m%s\e[m'

  fi

  _last_subject_num=$((_chain_of_trust_num - 1))

  _t_rst=' '
  _x_rst='  '

  for k in $(seq 0 $((_chain_of_trust_num - 1))) ; do

    # shellcheck disable=SC2086,SC2154
    if [[ "$HTRACE_COLORS" == "off" ]] ; then

      printf '\n%s         └─%s:%s %s' \
             "$_t_rst" "$k" "${_chain_stack_complete[$k]}"

      if [[ "$_server_certificate_status" -eq 1 ]] && \
         [[ "$k" -eq 0 ]] ; then

        printf '%s ' \
               "✓"

      elif [[ "$_server_certificate_status" -eq 0 ]] && \
           [[ "$k" -eq 0 ]] ; then

        printf '%s ' \
               "×"

      fi

      if [[ "$_root_in_local_store" -eq 1 ]] && \
         [[ "$_last_subject_num" -eq "$k" ]] ; then

        printf '%s ' \
               "$_root_in_local_store_id"

      elif [[ "$_root_in_local_store" -eq 0 ]] && \
           [[ "$_last_subject_num" -eq "$k" ]] ; then

        printf '%s ' \
               "$_root_in_local_store_id"

      fi

    else

      printf '\n%s         └─\e['${b2_trgb}'m%s:%s\e[m \e['${d2_trgb}'m%s\e[m' \
             "$_t_rst" "$k" "${_chain_stack_complete[$k]}"

      if [[ "$_server_certificate_status" -eq 1 ]] && \
         [[ "$k" -eq 0 ]] ; then

        printf '\e['${g2_trgb}'m%s\e[m ' \
               "✓"

      elif [[ "$_server_certificate_status" -eq 0 ]] && \
           [[ "$k" -eq 0 ]] ; then

        printf '\e['${e2_trgb}'m%s\e[m ' \
               "×"

      fi

      if [[ "$_root_in_local_store" -eq 1 ]] && \
         [[ "$_last_subject_num" -eq "$k" ]] ; then

        printf '\e['${d2_trgb}'m%s\e[m ' \
               "✓"

      elif [[ "$_root_in_local_store" -eq 0 ]] && \
           [[ "$_last_subject_num" -eq "$k" ]] ; then

        printf '\e['${e2_trgb}'m%s\e[m ' \
               "×"

      fi

      if [[ "$_last_certificate_duplicate" -eq 1 ]] && \
         [[ "$_last_subject_num" -eq "$k" ]] ; then

        printf '\e['${d2_trgb}'m%s\e[m ' \
               "⊙"

      fi

      echo "${_ssl_domain_cert_chain_verify_subjects_stack[$k]}"
      echo "${_ssl_domain_cert_chain_verify_issuers_stack[$k]}"

      if [[ "${_ssl_domain_cert_chain_verify_subjects_stack[$k]}" != "${_ssl_domain_cert_chain_verify_issuers_stack[$k]}" ]] ; then

        printf '\n%s           ├   \e['${x_trgb}'m%s\e[m' \
               "$_t_rst" "${_ssl_domain_cert_chain_verify_issuers_stack[$k]}"

      elif [[ "$_root_certificate_issuer" == "${_chain_stack_complete[$k]}" ]] ; then

        printf '\n%s           └ \e['${x_trgb}'m%s\e[m' \
               "$_t_rst" "$_root_certificate_issuer"

      fi

    fi

    _t_rst+="$_x_rst"

  done

  echo

  return $_STATE

}
