#!/usr/bin/env bash

# shellcheck shell=bash

# ``````````````````````````````````````````````````````````````````````````````
# Function name: DomainTrace()
#
# Description:
#   Trace domain.
#
# Usage:
#   DomainTrace domain
#
# Examples:
#   DomainTrace example.com
#

function DomainTrace() {

  # shellcheck disable=SC2034
  local _FUNCTION_ID="DomainTrace"
  local _STATE=0

  local _host="$1"

  # shellcheck disable=SC2034,SC2154
  _http_output=$(curl -ks -X GET -m "$_timeout" \
    -H 'Connection: keep-alive' \
    -H 'Upgrade-Insecure-Requests: 1' \
    -H "User-Agent: $_user_agent" \
    -H 'Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8' \
    -H 'Accept-Encoding: gzip, deflate, br' \
    -H 'Accept-Language: en-US,en;q=0.9,en-US;q=0.8,en;q=0.7' \
    -w '%{time_total}:%{time_connect}:%{local_ip}:%{local_port}:%{remote_ip}:%{remote_port}:%{http_version}:%{http_code}:%{scheme}:%{redirect_url}' \
    -o /dev/null --compressed "$_host")

  if [[ -z "$_http_output" ]] ; then

    # shellcheck disable=SC2034
    _STATE="1"

    _logger "stop" \
      "${_FUNCTION_ID}()" \
      "get redirect error"

  else

    _time_total=$(echo "$_http_output" | cut -d ":" -f1)
    _time_connect=$(echo "$_http_output" | cut -d ":" -f2)
    _local_ip=$(echo "$_http_output" | cut -d ":" -f3)
    _local_port=$(echo "$_http_output" | cut -d ":" -f4)
    _remote_ip=$(echo "$_http_output" | cut -d ":" -f5)
    _remote_port=$(echo "$_http_output" | cut -d ":" -f6)
    _http_version=$(echo "$_http_output" | cut -d ":" -f7)
    _http_code=$(echo "$_http_output" | cut -d ":" -f8)
    _http_scheme=$(echo "$_http_output" | cut -d ":" -f9 | tr '[:upper:]' '[:lower:]')
    _http_redirect=$(echo "$_http_output" | cut -d ":" -f10-)

    # Set local and remote sockets.
    _local_socket="${_local_ip}:${_local_port}"
    _remote_socket="${_remote_ip}:${_remote_port}"

    # Check if _remote_socket is private address - generate pattern.
    _class_pattern=('10.')        # 10.0.0.0/8
    _class_pattern+=('192.168.')  # 192.168.0.0/16
    _class_pattern+=('169.254.')  # not strictly private range, but link local

    for _ip in $(seq 16 31) ; do  # 172.16.0.0/12

      _class_pattern+=("172.${_ip}.")

    done

    # Get external IP (set https connection).
    # shellcheck disable=SC2155
    local _via_ip=$(curl -ks -m "$_timeout" http://whatismyip.akamai.com/)

    if [[ ! "$_via_ip" =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]] ; then

      _via_ip="unknown"

    fi

    for _ip in "${_class_pattern[@]}" ; do

      if [[ "$_remote_socket" = *"$_ip"* ]] ; then

        _via_ip="<int_link>"

      fi

    done

    DomainGeo "$_remote_ip"

    # Convert times.
    _time_total=$(echo "$_time_total" | tr ',' '.')
    _time_connect=$(echo "$_time_connect" | tr ',' '.')

    # Set properly total time.
    # shellcheck disable=SC2154
    _full_conn_time="$(bc <<<"$_full_conn_time + $_time_total" | awk '{printf "%f", $0}')"

    if [[ -z "$_remote_ip" ]] ; then

      # shellcheck disable=SC2086,SC2154
      printf '\n    \e['${e_trgb}'m%s\e[m:\n\n\t%s\n\t%s\n\n' \
             "Connection error" \
             "- domain not resolved" \
             "- http or https not responding"

      # shellcheck disable=SC2034
      _STATE="1"

      _logger "stop" \
        "${_FUNCTION_ID}()" \
        "Connection error (domain not resolved?)"

    fi

    # Convert _http_version value.
    if [[ "$_http_version" == "2" ]] ; then _http_version="2.0" ; fi

    # shellcheck disable=SC2034
    _STATE="0"

    # shellcheck disable=SC2154
    if [[ "$headers_state" -eq 1 ]] ; then

      PrintfHeaders

    else

      if [[ "$_hcounter" -eq 1 ]] ; then

        PrintfHeaders

        _hcounter=0

      fi

    fi

    if [[ "$_hide_src_ip_state" -eq 1 ]] ; then

      _local_socket_std="xxx.xxx.xxx.xxx"
      _via_ip_std="xxx.xxx.xxx.xxx"

    else

      _local_socket_std="$_local_socket"
      _via_ip_std="$_via_ip"

    fi

    # shellcheck disable=SC2086,SC2154
    printf ' \e['${e_trgb}'m•\e[m \e['${c_trgb}'m %-4.6s %-12.10s %-15.12s %-22.22s %-16.22s %-21.22s %-5.7s %-7.7s %-5.5s %-8.10s %s\e[m\n' \
           " $_req_num" \
           "$_full_conn_time" \
           "$_time_total" \
           "$_local_socket_std" \
           "$_via_ip_std" \
           "$_remote_socket" \
           "$_geo_ip" \
           "$_http_scheme" \
           "$_http_version" \
           "$_http_code" \
           "$_http_redirect"

    if [[ "$_http_scheme" == "https" ]] ; then

      DomainStrip "$_host"

      DomainSslCheck "$_host"

      DomainCertCheck "$_host"

      # shellcheck disable=SC2154
      if [[ "$ssl_state" -eq 1 ]] ; then

        # shellcheck disable=SC2154
        if [[ "$_ssl_params_verify" == "OK" ]] ; then

          _ssl_params_verify="ok"

          # shellcheck disable=SC2086,SC2154
          printf '         verification: \e['${g_trgb}'m%s\e[m\n' "$_ssl_params_verify"

        elif [[ "$_ssl_params_verify" == "self signed certificate" ]] ; then

          # shellcheck disable=SC2086,SC2154
          printf '         verification: \e['${d2_trgb}'m%s\e[m\n' "$_ssl_params_verify"

        else

          # shellcheck disable=SC2086,SC2154
          printf '         verification: \e['${e2_trgb}'m%s\e[m\n' "$_ssl_params_verify"

        fi

      fi

      # shellcheck disable=SC2034
      _last_http_scheme="$_http_scheme"

    elif [[ "$_http_scheme" == "http" ]] && [[ "$ssl_state" -eq 1 ]] ; then

      # shellcheck disable=SC2086,SC2154
      printf '         ssl: \e['${e_trgb}'m%s\e[m\n' "off"

    fi

    # shellcheck disable=SC2154
    if [[ "$headers_state" -eq 1 ]] ; then

      echo

      if [[ "$cache_bypass_state" -eq 0 ]] ; then

        # shellcheck disable=SC2034,SC2154
        curl -Iks -X GET -m "$_timeout" \
          -H 'Connection: keep-alive' \
          -H 'Upgrade-Insecure-Requests: 1' \
          -H "User-Agent: $_user_agent" \
          -H 'Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8' \
          -H 'Accept-Encoding: gzip, deflate, br' \
          -H 'Accept-Language: en-US,en;q=0.9,en-US;q=0.8,en;q=0.7' \
          --compressed "$_host" | \
          sed -e 's/^[ \t]*/         › /' | \
          sed 's/\r//' | grep "› ."

      else

        # shellcheck disable=SC2034,SC2154
        curl -Iks -X GET -m "$_timeout" \
          -H 'Connection: keep-alive' \
          -H 'Upgrade-Insecure-Requests: 1' \
          -H "User-Agent: $_user_agent" \
          -H 'Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8' \
          -H 'Accept-Encoding: gzip, deflate, br' \
          -H 'Accept-Language: en-US,en;q=0.9,en-US;q=0.8,en;q=0.7' \
          --compressed "${_host}${cache_bypass_type}" | \
          sed -e 's/^[ \t]*/         › /' | \
          sed 's/\r//' | grep "› ."

      fi

    fi

    # shellcheck disable=SC2154
    if [[ "$body_state" -eq 1 ]] ; then

      echo

      if [[ "$cache_bypass_state" -eq 0 ]] ; then

        # shellcheck disable=SC2034,SC2154
        curl -ks -X GET -m "$_timeout" \
          -H 'Connection: keep-alive' \
          -H 'Upgrade-Insecure-Requests: 1' \
          -H "User-Agent: $_user_agent" \
          -H 'Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8' \
          -H 'Accept-Encoding: gzip, deflate, br' \
          -H 'Accept-Language: en-US,en;q=0.9,en-US;q=0.8,en;q=0.7' \
          --compressed "$_host" | \
          sed -e 's/^[ \t]*/         › /' | \
          sed 's/\r//' | grep "› ."

      else

        # shellcheck disable=SC2034,SC2154
        curl -ks -X GET -m "$_timeout" \
          -H 'Connection: keep-alive' \
          -H 'Upgrade-Insecure-Requests: 1' \
          -H "User-Agent: $_user_agent" \
          -H 'Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8' \
          -H 'Accept-Encoding: gzip, deflate, br' \
          -H 'Accept-Language: en-US,en;q=0.9,en-US;q=0.8,en;q=0.7' \
          --compressed "${_host}${cache_bypass_type}" | \
          sed -e 's/^[ \t]*/         › /' | \
          sed 's/\r//' | grep "› ."

      fi

    fi

    _logger "info" \
      "${_FUNCTION_ID}()" \
      "get redirect: $_http_output"

  fi

  return $_STATE

}
