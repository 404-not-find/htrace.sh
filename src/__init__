#!/usr/bin/env bash

# shellcheck shell=bash

################################################################################
######################### Main function (script init) ##########################
################################################################################

function __main__() {

  local _FUNCTION_ID="__main__"
  local _STATE="0"

  # Stores the current date.
  readonly _cdate=$(date +%Y%m%d)

  # Variables related to the log file. Divided into three parts due
  # to the better possibility of manipulation for the user.
  # shellcheck disable=SC2154
  readonly _log_directory="${_rel}/log"
  # shellcheck disable=SC2154
  readonly _log_file="${_init_name}.${_cdate}.log"
  readonly _log_stdout="${_log_directory}/stdout.log"
  readonly _log_path="${_log_directory}/${_log_file}"

  # We check if we are a root user.
  if [[ "$EUID" -ne 0 ]] ; then

    printf "EUID is not equal 0 (no root user)\\n"
    _exit_ "1"

  fi

  # Path to import file.
  # shellcheck disable=SC2154
  readonly _import_path="${_src}/import"

  # External configuration file (-c|--config script param).
  config=""
  load_state="0"

  # Declaration of output variables (--debug and --verbose params).
  stdout_mode=""
  # shellcheck disable=SC2034
  verbose_mode="false"

  # Enable/disable output colors.
  # shellcheck disable=SC2034
  s_color="true"

  # Default 'domain' variables.
  local domain_state="0"
  local domain_type=""

  # Default 'headers' variable.
  local headers_state="0"

  # Set redirects limit.
  local _redirects=10

  # We place here used commands at script runtime, as strings to anything
  # unnecessarily run.
  readonly commands=(basename dirname stat ps date grep cut sed awk chown \
                     chmod mkdir curl openssl)

  # If you intend to specify the full path to the command we do it like:
  # readonly exec_gzip="/bin/gzip"

  # Stores the names of the missing commands.
  missing_hash=()
  missing_counter="0"

  for i in "${commands[@]}" ; do

    if [[ ! -z "$i" ]] ; then

      hash "$i" >/dev/null 2>&1 ; state="$?"

      # If the command was not found put it in the array
      if [[ "$state" -ne 0 ]] ; then

        missing_hash+=("$i")
        ((missing_counter++))

      fi

    fi

  done

  # It is a good idea to terminate the script at this stage
  # with information for the user to fix the errors if at least one
  # of the required commands in the commands array is not found.
  if [[ "$missing_counter" -gt 0 ]] ; then

    printf "not found in PATH: %s\\n" "${missing_hash[*]}" >&2
    _exit_ "1"

  fi

  # shellcheck disable=SC2154
  _logger "init" \
    "init '${_init_name}' in '${_init_directory}'" && \
  _logger "info" \
    "__init_params[] = (${__init_params[*]})," \
    "__script_params[] = (${__script_params[*]})"

  # Include import file.
  _load "null" "$_import_path"

  # Specifies the call parameters of the script, the exact description
  # can be found in _help_ and file README.md.
  local _short_opt="d:h"
  local _long_opt="help,domain:,headers"

  _GETOPT_PARAMS=$(getopt -o "${_short_opt}" --long "${_long_opt}" \
                   -n "${_init_name}" -- "${__script_params[@]}")

  # With this structure, in the case of problems with the parameters placed
  # in the _GETOPT_PARAMS variable we finish the script. Keep this in mind
  # because it has some consequences - the __main __() function will not be
  # executed.

  # Ends an error if the parameter or its argument is not valid.
  _getopt_state="$?"
  if [ "$_getopt_state" != 0 ] ; then
    _exit_ "1"
  # Ends if no parameter is specified.
  elif [[ "${#__script_params[@]}" -eq 0 ]] ; then
    _exit_ "0"
  fi

  eval set -- "$_GETOPT_PARAMS"
  while true ; do

    case $1 in

      --help)

        _help_

        shift ; _exit_ "0" ;;

      -d|--domain)

        export domain_state=1

        export domain_type="${2}"

        shift 2 ;;

      -h|--headers)

        export headers_state=1

        shift ;;

      *)

        if [[ "$2" == "-" ]] || [[ ! -z "$2" ]] ; then

          printf "%s: invalid option -- '%s'\\n" "$_init_name" "$2"
          _exit_ "1"

        # elif [[ -z "$2" ]] ; then break ; fi
        else break ; fi

        ;;

    esac

  done

  # If you run the script in debug mode, the information
  # will be displayed on the screen from this point.
  if [[ "$stdout_mode" == "debug" ]] ; then

    _logger "info" \
      "${_FUNCTION_ID}()" \
      "starting debug mode"

  fi

  # Running tasks before start user functions.
  _before_init

  ################################# USER SPACE #################################
  # ````````````````````````````````````````````````````````````````````````````
  # Put here all your variable declarations, function calls
  # and all the other code blocks.

  # In this section we add external file (for -c|--config script param).
  if [[ "$load_state" -eq 1 ]] ; then _load "head" "$config" ; fi

  # shellcheck disable=SC2034
  # Generate random value.
  _random=$(date +"%s")

  # Array that stores the names of variables used that are part of the script
  # call parameters (_GETOPT_PARAMS). Useful when checking whether all
  # or selected parameters without which the script can not work properly
  # have been used. Do not add the load_state variable to the _opt_values array,
  # which is supported above.
  _opt_values=("domain_state" "domain_type")

  # Checking the value of the variables (if they are unset or empty):
  #   - variables for call parameters
  #   - variables from the additional configuration files
  if [[ "${#_opt_values[@]}" -ne 0 ]] ; then

    for i in "${_opt_values[@]}" ; do

      _i="" ; eval _i='$'"$i"

      _logger "info" \
        "${_FUNCTION_ID}()" \
        "$i: '$_i'"

      if [[ -z "$_i" ]] ; then

        _sprintf "stop" "error of argument value: '$i' is unset or empty"

        _logger "stop" \
          "${_FUNCTION_ID}()" \
          "error of argument value: '$i' is unset or empty"

      fi

    done

  fi

  # Strip domain name.
  DomainStrip "$domain_type"

  # shellcheck disable=SC2154
  # Set -d|--domain value to variable.
  local _http_redirect="${_domain_proto}${_domain_name}${_domain_path}"

  # Set default colors for printf.
  # shellcheck disable=SC2034
  local e_trgb="1;1;31"
  # shellcheck disable=SC2034
  local d_trgb="4;1;33"
  # shellcheck disable=SC2034
  local s_trgb="2;2;34"
  # shellcheck disable=SC2034
  local h_trgb="1;2;36"
  # shellcheck disable=SC2034
  local c_trgb="1;1;38"

  # shellcheck disable=SC2154
  printf '\n    %s %s\n\n' \
         "$_init_name" "$_version"

  # Show http(s) domain trace.
  printf '\n    URI: \e['${d_trgb}'m%s\e['${d_trgb}'m%s\e['${d_trgb}'m%s\e[m\n' \
         "$_domain_proto" "$_domain_name" "$_domain_path"

  # Start tracing.
  local _http_code="300"

  # Temporary variables.
  local _req_num=0
  # shellcheck disable=SC2034
  local _full_conn_time="0.000000"

  # shellcheck disable=SC2034
  local _rcounter=1
  # shellcheck disable=SC2034
  local _hcounter=1

  while [[ ${_http_code} =~ ^3[0-9]{2}$ ]] ; do

    # Prevention of redirection loops.
    if [[ "$_rcounter" -eq "$_redirects" ]] ; then

      printf '\n    %s \e['${e_trgb}'m%s\e[m\n\n' \
             "Redirects loop prevention: limit is" \
             "$_redirects"

      _logger "stop" \
        "${_FUNCTION_ID}()" \
        "Redirects loop prevention: limit is $_redirects"

    else

      # shellcheck disable=SC2034,SC2154
      _req_num=$((_req_num + 1))

      DomainTrace "$_http_redirect"

      _rcounter=$((_rcounter + 1))

    fi

  done

  echo

  # ````````````````````````````````````````````````````````````````````````````

  return "$_STATE"

}
